% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forecast-evaluation.R
\name{fv_score_forecast}
\alias{fv_score_forecast}
\title{Evaluate forecasts using proper scoring rules}
\usage{
fv_score_forecast(forecast, obs, log = FALSE, round_to = 3, ...)
}
\arguments{
\item{forecast}{A posterior forecast or posterior prediction as returned by
\code{\link[=summary.fv_posterior]{summary.fv_posterior()}}, \code{\link[=summary.fv_forecast]{summary.fv_forecast()}} or \code{\link[=fv_extract_forecast]{fv_extract_forecast()}}.
Internally case forecasts are filtered for using the \code{value_type} variable
if present as are only overall or combined case counts (i.e as returned)
by the 1 and 2 strain models. If looking for more complex scoring it may be
wise to implement a custom wrapper.}

\item{obs}{A data frame of observed data as produced by \code{\link[=latest_obs]{latest_obs()}}.}

\item{log}{Logical, defaults to FALSE. Should scores be calculated on the
log scale (with a 0.01 shift) for both observations and forecasts. Scoring in
this way can be thought of as a relative score vs the more usual absolute
measure. It may be useful when targets are on very different scales or when
the forecaster is more interested in good all round performance versus good
performance for targets with large values.}

\item{round_to}{Integer defaults to 3. Number of digits to round scoring
output to.}

\item{...}{Additional arguments passed to \code{\link[scoringutils:eval_forecasts]{scoringutils::eval_forecasts()}}.}
}
\value{
A \code{data.table} as returned by \code{\link[scoringutils:eval_forecasts]{scoringutils::eval_forecasts()}}.
}
\description{
Acts as a wrapper to \code{\link[scoringutils:eval_forecasts]{scoringutils::eval_forecasts()}}. In particular,
handling filtering the output for various \link{forecast.vocs} functions and
linking this output to observed data. See the documentation for the
\link{scoringutils} package for more on forecast scoring and the documentation
and examples below for simple examples in the context of \link{forecast.vocs}.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
options(mc.cores = 4)
library(data.table)
library(scoringutils)

# Fit and forecast using both the one and two strain models
forecasts <- forecast(
  germany_covid19_delta_obs,
  forecast_date = as.Date("2021-06-12"),
  horizon = 4,
  strains = c(1, 2),
  adapt_delta = 0.99,
  max_treedepth = 15,
  variant_relationship = "scaled"
)

# Extract forecasts
forecasts <- summary(forecasts, target = "forecast", type = "cases")

# Filter for the latest available observations
obs <- latest_obs(germany_covid19_delta_obs)

# score overall
fv_score_forecast(forecasts, obs, summarise_by = "strains")

# score overall on a log scale
fv_score_forecast(forecasts, obs, summarise_by = "strains", log = TRUE)

# score by horizon
fv_score_forecast(forecasts, obs, summarise_by = c("strains", "horizon"))

# score by horizon on a log scale
fv_score_forecast(
 forecasts, obs, summarise_by = c("strains", "horizon"), log = TRUE
)
\dontshow{\}) # examplesIf}
}
\seealso{
Functions to explore and validate models
\code{\link{bp_launch_shinystan}()},
\code{\link{plot_pairs}()}
}
\concept{modelvalidation}
